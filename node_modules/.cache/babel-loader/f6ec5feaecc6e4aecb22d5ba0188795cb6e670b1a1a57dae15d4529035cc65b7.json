{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Vitrine_interativa\\\\src\\\\components\\\\comLogging.js\";\nimport React, { useEffect } from \"react\";\n\n/**\r\n * üîç HOC (Higher Order Component) comLogging\r\n * \r\n * Este HOC √© um exemplo pr√°tico de como criar um componente de ordem superior\r\n * que adiciona funcionalidade de logging ao ciclo de vida de outros componentes.\r\n * \r\n * üìö Conceitos Demonstrados:\r\n * - Higher Order Components (HOC)\r\n * - Composi√ß√£o de componentes\r\n * - useEffect para ciclo de vida\r\n * - Props spreading\r\n * - Naming conventions\r\n * \r\n * üéØ Objetivos de Aprendizado:\r\n * 1. Entender o conceito de HOC em React\r\n * 2. Aprender a criar componentes reutiliz√°veis\r\n * 3. Implementar logging para debugging\r\n * 4. Compreender o ciclo de vida de componentes\r\n * \r\n * @param {React.ComponentType} Componente - O componente a ser envolvido\r\n * @returns {React.ComponentType} Um novo componente com funcionalidade de logging\r\n * \r\n * @example\r\n * // Como usar o HOC\r\n * const MeuComponenteComLog = comLogging(MeuComponente);\r\n * \r\n * // O componente agora ter√° logs autom√°ticos\r\n * <MeuComponenteComLog />\r\n * \r\n * // Sa√≠da no console:\r\n * // \"Componente MeuComponente montado\"\r\n * // \"Componente MeuComponente desmontado\"\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction comLogging(Componente) {\n  var _s = $RefreshSig$();\n  // Nome para identifica√ß√£o nos logs\n  const nomeExibicao = Componente.displayName || Componente.name || \"Componente\";\n\n  /**\r\n   * Componente que envolve o componente original\r\n   * e adiciona funcionalidade de logging\r\n   */\n  function ComponenteComLog(props) {\n    _s();\n    useEffect(() => {\n      // Log quando o componente √© montado\n      console.log(`Componente ${nomeExibicao} montado`);\n\n      // Fun√ß√£o de limpeza para logar quando o componente √© desmontado\n      return () => {\n        console.log(`Componente ${nomeExibicao} desmontado`);\n      };\n    }, []);\n\n    // Renderiza o componente original com suas props\n    return /*#__PURE__*/_jsxDEV(Componente, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Define o nome de exibi√ß√£o para melhor debugging\n  _s(ComponenteComLog, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  ComponenteComLog.displayName = `ComLogging(${nomeExibicao})`;\n  return ComponenteComLog;\n}\nexport default comLogging;","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","comLogging","Componente","_s","$RefreshSig$","nomeExibicao","displayName","name","ComponenteComLog","props","console","log","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Github/Vitrine_interativa/src/components/comLogging.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\n/**\r\n * üîç HOC (Higher Order Component) comLogging\r\n * \r\n * Este HOC √© um exemplo pr√°tico de como criar um componente de ordem superior\r\n * que adiciona funcionalidade de logging ao ciclo de vida de outros componentes.\r\n * \r\n * üìö Conceitos Demonstrados:\r\n * - Higher Order Components (HOC)\r\n * - Composi√ß√£o de componentes\r\n * - useEffect para ciclo de vida\r\n * - Props spreading\r\n * - Naming conventions\r\n * \r\n * üéØ Objetivos de Aprendizado:\r\n * 1. Entender o conceito de HOC em React\r\n * 2. Aprender a criar componentes reutiliz√°veis\r\n * 3. Implementar logging para debugging\r\n * 4. Compreender o ciclo de vida de componentes\r\n * \r\n * @param {React.ComponentType} Componente - O componente a ser envolvido\r\n * @returns {React.ComponentType} Um novo componente com funcionalidade de logging\r\n * \r\n * @example\r\n * // Como usar o HOC\r\n * const MeuComponenteComLog = comLogging(MeuComponente);\r\n * \r\n * // O componente agora ter√° logs autom√°ticos\r\n * <MeuComponenteComLog />\r\n * \r\n * // Sa√≠da no console:\r\n * // \"Componente MeuComponente montado\"\r\n * // \"Componente MeuComponente desmontado\"\r\n */\r\nfunction comLogging(Componente) {\r\n  // Nome para identifica√ß√£o nos logs\r\n  const nomeExibicao = Componente.displayName || Componente.name || \"Componente\";\r\n\r\n  /**\r\n   * Componente que envolve o componente original\r\n   * e adiciona funcionalidade de logging\r\n   */\r\n  function ComponenteComLog(props) {\r\n    useEffect(() => {\r\n      // Log quando o componente √© montado\r\n      console.log(`Componente ${nomeExibicao} montado`);\r\n      \r\n      // Fun√ß√£o de limpeza para logar quando o componente √© desmontado\r\n      return () => {\r\n        console.log(`Componente ${nomeExibicao} desmontado`);\r\n      };\r\n    }, []);\r\n\r\n    // Renderiza o componente original com suas props\r\n    return <Componente {...props} />;\r\n  }\r\n\r\n  // Define o nome de exibi√ß√£o para melhor debugging\r\n  ComponenteComLog.displayName = `ComLogging(${nomeExibicao})`;\r\n\r\n  return ComponenteComLog;\r\n}\r\n\r\nexport default comLogging; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA,SAAAC,MAAA,IAAAC,OAAA;AAiCA,SAASC,UAAUA,CAACC,UAAU,EAAE;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC9B;EACA,MAAMC,YAAY,GAAGH,UAAU,CAACI,WAAW,IAAIJ,UAAU,CAACK,IAAI,IAAI,YAAY;;EAE9E;AACF;AACA;AACA;EACE,SAASC,gBAAgBA,CAACC,KAAK,EAAE;IAAAN,EAAA;IAC/BL,SAAS,CAAC,MAAM;MACd;MACAY,OAAO,CAACC,GAAG,CAAC,cAAcN,YAAY,UAAU,CAAC;;MAEjD;MACA,OAAO,MAAM;QACXK,OAAO,CAACC,GAAG,CAAC,cAAcN,YAAY,aAAa,CAAC;MACtD,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;;IAEN;IACA,oBAAOL,OAAA,CAACE,UAAU;MAAA,GAAKO;IAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAClC;;EAEA;EAAAZ,EAAA,CAfSK,gBAAgB;EAgBzBA,gBAAgB,CAACF,WAAW,GAAG,cAAcD,YAAY,GAAG;EAE5D,OAAOG,gBAAgB;AACzB;AAEA,eAAeP,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}